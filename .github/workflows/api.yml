name: "API"
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  release:
    types: [ published ]

defaults:
  run:
    shell: bash
    working-directory: ./api

jobs:
  Changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
              - '.github/workflows/api.yml'
  Build:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: ./.github/actions/cache-api
      - name: Install Dependencies and Build
        run: cargo build
  Format:
    if: ${{ needs.changes.outputs.api == 'true' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ Build ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: ./.github/actions/cache-api
      - name: Install nightly
        run: rustup default nightly
      - name: Install rustfmt
        run: rustup component add rustfmt --toolchain nightly
      - name: Check format
        run: cargo +nightly fmt --all --check
  Tests:
    runs-on: ubuntu-latest
    needs: [ Build ]
    if: ${{ needs.changes.outputs.api == 'true' && always() }}
    env:
      ROCKET_DATABASES: '{sea_orm={url="postgresql://test:test@localhost:5432/test"}}'
      CONFIG_DIR: "./data"
      SCANNER_API_KEY: "API_KEY"
      RABBIT_USER: test
      RABBIT_PASS: test
      RABBIT_HOST: localhost
      RABBIT_PORT: 5672
    services:
      postgres:
        image: postgres:alpine3.16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mq:
        image: rabbitmq:3.13-alpine
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        ports:
          - 5672:5672
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Restore Dependencies
        uses: ./.github/actions/cache-api
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Build
        run: cargo build
      - name: Run unit tests
        run: cargo llvm-cov --lcov --output-path lcov.info --ignore-filename-regex '(migration|entity)/.*' --tests -- --test-threads=1
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./api/lcov.info
          flags: api
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  Dockerize:
    if: ${{ needs.changes.outputs.api == 'true' && github.event_name == 'pull_request' }}
    needs: [ Build ]
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker
        uses: docker/build-push-action@v3
        with:
          context: ./api
          push: false
  Publish:
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || (needs.changes.outputs.api == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            arthichaud/blee-api
            ghcr.io/${{ github.repository }}-api
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: ./api
          push: true
          tags: ${{ github.event_name == 'release' && steps.meta.outputs.tags || 'arthichaud/blee-api:edge' }}
          labels: ${{ steps.meta.outputs.labels }}