x-transcoder: &transcoder-base
  image: ghcr.io/zoriya/kyoo_transcoder:edge
  networks:
    default:
      aliases:
        - transcoder
  ports:
    - "7666:7666"
  restart: on-failure
  cpus: 1
  env_file:
    - ./.env
  environment:
    - GOCODER_PREFIX=/videos
  volumes:
    - ${DATA_DIR}:/videos:ro
    - ${CACHE_ROOT}:/cache
    - metadata:/metadata

services:
  scanner:
    build:
      context: ./scanner
      dockerfile: Dockerfile.dev
    restart: on-failure
    ports:
      - "8133:8133"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./scanner:/app
      - ./scanner.example.json:/config/scanner.json
      - ${DATA_DIR}:/videos
    environment:
      - API_URL=http://api:8000
      - WATCH_DIR=/videos
      - SCANNER_API_KEY=${SCANNER_API_KEY}
      - CONFIG_DIR=/config
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CONFIG_DIR=/data
      - RABBIT_HOST=mq
      - RABBIT_PORT=5672
    env_file:
      - .env
    volumes:
      - ./api:/app
      - api_images:/data
      - api_target:/app/target
      - api_cargo:/usr/local/cargo
  mq:
    image: rabbitmq:3.13-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 10
  front:
    ports:
      - "3000:3000"
    build:
      context: ./front-vue
      dockerfile: Dockerfile.dev
    environment:
      - SSR_SERVER_URL=http://api:8000
      - SSR_TRANSCODER_URL=http://transcoder:7666
      - SSR_SCANNER_URL=http://scanner:8133
    volumes:
      - ./front-vue:/app
  matcher:
    build:
      context: ./matcher
      dockerfile: Dockerfile.dev
    restart: on-failure
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./matcher:/app
    environment:
      - RABBIT_HOST=mq
      - RABBIT_PORT=5672
      - API_URL=http://api:8000
      - MATCHER_API_KEY=${MATCHER_API_KEY}
    env_file:
      - .env
  db:
    image: postgres:alpine3.16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env
  transcoder:
    <<: *transcoder-base
    profiles: ['', 'cpu']

  transcoder-nvidia:
    <<: *transcoder-base
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    environment:
      - GOCODER_PREFIX=/video
      - GOCODER_HWACCEL=nvidia
    profiles: ['nvidia']

  transcoder-vaapi:
    <<: *transcoder-base
    devices:
      - /dev/dri:/dev/dri
    environment:
      - GOCODER_PREFIX=/video
      - GOCODER_HWACCEL=vaapi
      - GOCODER_VAAPI_RENDERER=${GOCODER_VAAPI_RENDERER:-/dev/dri/renderD128}
    profiles: ['vaapi']
  # qsv is the same setup as vaapi but with the hwaccel env var different
  transcoder-qsv:
    <<: *transcoder-base
    devices:
      - /dev/dri:/dev/dri
    environment:
      - GOCODER_PREFIX=/video
      - GOCODER_HWACCEL=qsv
      - GOCODER_VAAPI_RENDERER=${GOCODER_VAAPI_RENDERER:-/dev/dri/renderD128}
    profiles: ['qsv']
volumes:
  db:
  api_target:
  api_images:
  api_cargo:
  metadata:
