services:
  scanner:
    build:
      context: ./scanner
      dockerfile: Dockerfile.dev
    restart: on-failure
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./scanner:/app
      - ./scanner.example.json:/config/scanner.json
      - ${DATA_DIR}:/videos
    environment:
      - API_URL=http://api:8000
      - WATCH_DIR=/videos
      - SCANNER_API_KEY=${SCANNER_API_KEY}
      - CONFIG_DIR=/config
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CONFIG_DIR=/data
      - RABBIT_HOST=mq
      - RABBIT_PORT=5672
    env_file:
      - .env
    volumes:
      - ./api:/app
      - ./data:/data
      - api_target:/app/target
      - api_cargo:/usr/local/cargo
  mq:
    image: rabbitmq:3.13-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
  matcher:
    build:
      context: ./matcher
      dockerfile: Dockerfile.dev
    restart: on-failure
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./matcher:/app
    environment:
      - RABBIT_HOST=mq
      - RABBIT_PORT=5672
      - API_URL=http://api:8000
      - MATCHER_API_KEY=${MATCHER_API_KEY}
    env_file:
      - .env
  db:
    image: postgres:alpine3.16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env
volumes:
  db:
  api_target:
  api_cargo:
