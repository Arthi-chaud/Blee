//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use super::sea_orm_active_enums::ChapterTypeEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "chapter")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub name: String,
	pub thumbnail_id: Option<Uuid>,
	pub movie_id: Uuid,
	pub start_time: i32,
	pub end_time: i32,
	pub r#type: Vec<ChapterTypeEnum>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::image::Entity",
		from = "Column::ThumbnailId",
		to = "super::image::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Image,
	#[sea_orm(
		belongs_to = "super::movie::Entity",
		from = "Column::MovieId",
		to = "super::movie::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Movie,
}

impl Related<super::image::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Image.def()
	}
}

impl Related<super::movie::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Movie.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
