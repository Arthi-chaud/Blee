//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use super::sea_orm_active_enums::ImageTypeEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "image")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub blurhash: String,
	#[sea_orm(column_type = "Float")]
	pub aspect_ratio: f32,
	pub r#type: ImageTypeEnum,
	pub colors: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::artist::Entity")]
	Artist,
	#[sea_orm(has_many = "super::chapter::Entity")]
	Chapter,
	#[sea_orm(has_many = "super::extra::Entity")]
	Extra,
	#[sea_orm(has_many = "super::file::Entity")]
	File,
	#[sea_orm(has_many = "super::movie::Entity")]
	Movie,
	#[sea_orm(has_many = "super::package::Entity")]
	Package,
}

impl Related<super::artist::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Artist.def()
	}
}

impl Related<super::chapter::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Chapter.def()
	}
}

impl Related<super::extra::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Extra.def()
	}
}

impl Related<super::file::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::File.def()
	}
}

impl Related<super::movie::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Movie.def()
	}
}

impl Related<super::package::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Package.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
