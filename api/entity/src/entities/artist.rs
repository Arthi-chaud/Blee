//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "artist")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub name: String,
	#[sea_orm(unique)]
	pub unique_slug: String,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
	pub registered_at: Date,
	pub poster_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::extra::Entity")]
	Extra,
	#[sea_orm(
		belongs_to = "super::image::Entity",
		from = "Column::PosterId",
		to = "super::image::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	Image,
	#[sea_orm(has_many = "super::movie::Entity")]
	Movie,
	#[sea_orm(has_many = "super::package::Entity")]
	Package,
}

impl Related<super::extra::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Extra.def()
	}
}

impl Related<super::image::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Image.def()
	}
}

impl Related<super::movie::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Movie.def()
	}
}

impl Related<super::package::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Package.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
