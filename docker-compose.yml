# This compose allows to build the whole project in a "production"-like environment 
services:
  api:
    build:
      context: ./api
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - data:${CONFIG_DIR}
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- localhost:8000"]
      interval: 5s
      retries: 3
  scanner:
    build:
      context: ./scanner
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ${DATA_DIR}:/video
      - ./scanner.example.json:/app/scanner.json
    environment:
      - API_URL=http://api:8000
      - WATCH_DIR=/video
      - SCANNER_API_KEY=${SCANNER_API_KEY}
      - CONFIG_DIR=/app
  db:
    image: postgres:alpine3.16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    expose:
      - 5432
    volumes:
      - db:/var/lib/postgresql/data
volumes:
  db:
  data:
